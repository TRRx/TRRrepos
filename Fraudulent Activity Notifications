using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

//https://www.hackerrank.com/challenges/fraudulent-activity-notifications
class Solution {

    static double GetMedian(List<int> expenditure) {
            var sortedExpenditure = expenditure.OrderBy(e => e);
            int mid = sortedExpenditure.Count() / 2;
            double median = (sortedExpenditure.Count() % 2 != 0) ? (double)sortedExpenditure.ElementAt(mid) : ((double)sortedExpenditure.ElementAt(mid) + (double)sortedExpenditure.ElementAt(mid - 1) / 2);
           return median;
       }
    
    // Complete the activityNotifications function below.
    static int activityNotifications(int[] expenditure, int d) {
        int notifications = 0;
        for (int i = d; i < expenditure.Length; i++) {
            if (expenditure[i] >= 2 * GetMedian(expenditure.ToList().GetRange(i - d, d))) {
                notifications++;
            }
        }
        return notifications;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nd = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nd[0]);

        int d = Convert.ToInt32(nd[1]);

        int[] expenditure = Array.ConvertAll(Console.ReadLine().Split(' '), expenditureTemp => Convert.ToInt32(expenditureTemp))
        ;
        int result = activityNotifications(expenditure, d);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
